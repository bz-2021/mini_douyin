syntax = "proto3";

package user;
// 这部分的内容是关于最后生成的go文件是处在哪个目录哪个包中，代表在当前目录生成，service代表了生成的go文件的包名是service
option go_package = ".;service;";

service Service {
  rpc Register(UserRegisterRequest) returns(UserRegisterResponse); // 用户注册
  rpc Login(UserLoginRequest) returns(UserLoginResponse); // 用户登录
  rpc UserInfo(UserInfoRequest) returns(UserInfoResponse); // 获取用户信息
}

message User {
  int64 id = 1; // 用户id
  string name = 2; // 用户名称
  optional int64 follow_count = 3; // 关注总数
  optional int64 follower_count = 4; // 粉丝总数
  bool is_follow = 5; // true-已关注，false-未关注
  optional string avatar = 6; //用户头像
  optional string background_image = 7; //用户个人页顶部大图
  optional string signature = 8; //个人简介
  optional int64 total_favorited = 9; //获赞数量
  optional int64 work_count = 10; //作品数量
  optional int64 favorite_count = 11; //点赞数量
}

message UserInfoRequest {
  int64 user_id = 1; // 用户id
  string token = 2; // 用户鉴权token
}

message UserInfoResponse {
  int32 status_code = 1; // 状态码，0-成功，其他值-失败
  optional string status_msg = 2; // 返回状态描述
  User user = 3; // 用户信息
}

message UserRegisterRequest {
  string username = 1; // 注册用户名，最长32个字符
  string password = 2; // 密码，最长32个字符
}

message UserRegisterResponse {
  int32 status_code = 1; // 状态码，0-成功，其他值-失败
  optional string status_msg = 2; // 返回状态描述
  int64 user_id = 3; // 用户id
  string token = 4; // 用户鉴权token
}

message UserLoginRequest {
  string username = 1; // 登录用户名
  string password = 2; // 登录密码
}

message UserLoginResponse {
  int32 status_code = 1; // 状态码，0-成功，其他值-失败
  optional string status_msg = 2; // 返回状态描述
  int64 user_id = 3; // 用户id
  string token = 4; // 用户鉴权token
}